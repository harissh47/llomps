# Map the forwarded host and proto
map $http_x_forwarded_proto $proxy_x_forwarded_proto {
    default $http_x_forwarded_proto;
    ''      $scheme;
}

map $http_x_forwarded_host $proxy_x_forwarded_host {
    default $http_x_forwarded_host;
    ''      $http_host;
}

server {
    listen 80;
    server_name _;

    # Common proxy settings
    proxy_http_version 1.1;
    proxy_set_header Upgrade $http_upgrade;
    proxy_set_header Connection "upgrade";
    proxy_set_header Host $proxy_x_forwarded_host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $proxy_x_forwarded_proto;
    proxy_set_header X-Forwarded-Host $proxy_x_forwarded_host;
    proxy_buffering off;

    # Landing page static files
    location /_next/ {
        # First try landing page
        proxy_pass http://land:3010/_next/;
        # If not found in landing, try web app
        proxy_intercept_errors on;
        error_page 404 = @web_next;
        expires 365d;
        access_log off;
    }

    # Fallback to web app static files
    location @web_next {
        proxy_pass http://web:3000$request_uri;
        expires 365d;
        access_log off;
    }

    location / {
        proxy_pass http://web:3000;
        include proxy.conf;
    }

    location /landing {
        proxy_pass http://land:3010/landing;
        include proxy.conf;
    }

    location /app {
        proxy_pass http://web:3000;
        include proxy.conf;
    }

    location /console/api/ {
        # rewrite ^/console/api/(.*) /$1 break;
        proxy_pass http://api:5001/console/api/;
        include proxy.conf;
    }

    location /console/ {
        proxy_pass http://api:5001/console/;
        include proxy.conf;
    }

    location /api/ {
        proxy_pass http://api:5001/api/;
        include proxy.conf;
        add_header 'Access-Control-Allow-Origin' '*';
        add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS, PUT, DELETE';
        add_header 'Access-Control-Allow-Headers' 'Content-Type, Authorization';
        if ($request_method = 'OPTIONS') {
            add_header 'Access-Control-Allow-Origin' '*';
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS, PUT, DELETE';
            add_header 'Access-Control-Allow-Headers' 'Content-Type, Authorization';
            add_header 'Access-Control-Max-Age' 3600;
            return 204;
        }
        
    }

    location /v1/ {
    proxy_pass http://api:5001/v1/;  
    include proxy.conf;

    # # Add CORS headers (same as your `/api/` block)
    # add_header 'Access-Control-Allow-Origin' '*';
    # add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS, PUT, DELETE';
    # add_header 'Access-Control-Allow-Headers' 'Content-Type, Authorization';
    
    # if ($request_method = 'OPTIONS') {
    #     add_header 'Access-Control-Allow-Origin' '*';
    #     add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS, PUT, DELETE';
    #     add_header 'Access-Control-Allow-Headers' 'Content-Type, Authorization';
    #     add_header 'Access-Control-Max-Age' 3600;
    #     return 204;
    # }
}

    location /files/ {
        proxy_pass http://api:5001/files/;
        include proxy.conf;
    }

    # Uncomment the code below if you want to support HTTPS
    # listen 443 ssl;
    # ssl_certificate ./../ssl/your_cert_file.cer;
    # ssl_certificate_key ./../ssl/your_cert_key.key;
    # ssl_protocols TLSv1.1 TLSv1.2 TLSv1.3;
    # ssl_prefer_server_ciphers on;
    # ssl_session_cache shared:SSL:10m;
    # ssl_session_timeout 10m;
}
